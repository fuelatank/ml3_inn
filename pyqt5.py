# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled2.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os, sys
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import (QWidget, QMainWindow, QSplitter, QScrollArea, \
    QHBoxLayout, QVBoxLayout, QGridLayout, QFrame, QPushButton, QLabel, \
        QMenuBar, QStatusBar, QApplication, QSizePolicy)

NOSPLAY = 0
LEFT = 1
RIGHT = 2
UP = 3

IMAGEPATH = os.path.join("..", "ml3_inn", "images")

def getImages(path):
    pixmapDict = {}
    walker = os.walk(path)
    root, _, files = next(walker)
    for filename in files:
        name, _ = os.path.splitext(filename)
        pixmap = QtGui.QPixmap(os.path.join(root, filename))
        pixmapDict[name] = pixmap
    return pixmapDict

pixmaps = getImages(IMAGEPATH)

class Cards:
    def __init__(self, layout, parentWidget, parentLayout):
        self.parent = parentWidget
        self.layout = layout(parentWidget)
        parentLayout.addLayout(self.layout)
        self.cards = []
    
    def redraw(self, cards):
        self.clear()
        self.cards = cards
        self.draw()
    
    def clear(self):
        for card in self.cards:
            self.layout.removeWidget(card)
    
    def draw(self):
        for card in self.cards:
            self.layout.addWidget(card)

class Stack(Cards):
    def __init__(self, parentWidget, parentLayout):
        super(Stack, self).__init__(QGridLayout, parentWidget, parentLayout)
    
    def redraw(self, cards, direction):
        self.clear()
        self.cards = cards
        self.draw(direction)
    
    def clear(self):
        for card in self.cards:
            self.layout.removeWidget(card)
        card.setText("")
    
    def draw(self, direction):
        if direction == NOSPLAY:
            for i, card in enumerate(self.cards):
                self.layout.addWidget(card, 0, 0)
            card.setText(f"{i+1}")
        elif direction == LEFT:
            for i, card in enumerate(self.cards):
                self.layout.addWidget(card, 0, i, 1, 3)
                card.lower()
        elif direction == RIGHT:
            for i, card in enumerate(self.cards):
                self.layout.addWidget(card, 0, i, 1, 3)
        elif direction == UP:
            for i, card in enumerate(self.cards):
                self.layout.addWidget(card, i, 0, 2, 1)
                card.lower()
        else:
            raise ValueError(f"invalid argument: {direction}")

class CardList(Cards):
    def __init__(self, parentWidget, parentLayout):
        super(CardList, self).__init__(QHBoxLayout, parentWidget, parentLayout)

class LabelList(Cards):
    def __init__(self, parentWidget, parentLayout):
        super(LabelList, self).__init__(QHBoxLayout, parentWidget, parentLayout)
    
    def redraw(self, texts):
        self.clear()
        self.cards = self.makeLabels(texts)
        self.draw()
    
    def makeLabels(self, texts):
        labels = []
        for text in texts:
            label = QLabel(text, self.parent)
            labels.append(label)
        return labels
    
    def clear(self):
        for card in self.cards:
            card.deleteLater()

class Ui_MainWindow(object):
    def __init__(self, MainWindow):
        self.MainWindow = MainWindow

    def setupUi(self):
        MainWindow = self.MainWindow
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(781, 637)

        self.centralwidget = QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.splitter = QSplitter(self.centralwidget)
        self.splitter.setOrientation(QtCore.Qt.Horizontal)
        self.splitter.setObjectName("splitter")

        self.frame = QFrame(self.splitter)
        self.frame.setFrameShape(QFrame.StyledPanel)
        self.frame.setFrameShadow(QFrame.Raised)
        self.frame.setObjectName("frame")

        self.verticalLayout_2 = QVBoxLayout(self.frame)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.pushButton_2 = QPushButton(self.frame)
        self.pushButton_2.setObjectName("pushButton_2")
        self.verticalLayout_2.addWidget(self.pushButton_2)
        self.pushButton = QPushButton(self.frame)
        self.pushButton.setObjectName("pushButton")
        self.verticalLayout_2.addWidget(self.pushButton)

        self.scrollArea = QScrollArea(self.splitter)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.mainBoard = QWidget()
        self.mainBoard.setGeometry(QtCore.QRect(0, 0, 611, 568))
        self.mainBoard.setObjectName("scrollAreaWidgetContents")

        self.verticalLayout_4 = QVBoxLayout(self.mainBoard)
        self.verticalLayout_4.setObjectName("verticalLayout_4")

        self.opAchievementLayout = LabelList(self.mainBoard, self.verticalLayout_4)
        self.opScoreLayout = LabelList(self.mainBoard, self.verticalLayout_4)
        self.opCardLayout = LabelList(self.mainBoard, self.verticalLayout_4)

        self.opBoardLayout = QHBoxLayout(self.mainBoard)
        self.opStackLayouts = [
            Stack(self.mainBoard, self.opBoardLayout) for _ in range(5)]
        self.verticalLayout_4.addLayout(self.opBoardLayout)

        self.middleLayout = LabelList(self.mainBoard, self.verticalLayout_4)

        self.boardLayout = QHBoxLayout(self.mainBoard)
        self.stackLayouts = [
            Stack(self.mainBoard, self.boardLayout) for _ in range(5)]
        self.verticalLayout_4.addLayout(self.boardLayout)

        self.cardLayout = CardList(self.mainBoard, self.verticalLayout_4)
        self.scoreLayout = CardList(self.mainBoard, self.verticalLayout_4)
        self.achievementLayout = LabelList(self.mainBoard, self.verticalLayout_4)
        
        self.setupCards(self.mainBoard)

        self.gridLayout = QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.label_3 = QLabel(self.mainBoard)
        sizePolicy = QSizePolicy(QSizePolicy.Preferred, QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_3.sizePolicy().hasHeightForWidth())
        self.label_3.setSizePolicy(sizePolicy)
        self.label_3.setMaximumSize(QtCore.QSize(175, 125))
        self.label_3.setText("")
        self.label_3.setPixmap(QtGui.QPixmap("../ml3_inn/images/agriculture.jpg"))
        self.label_3.setScaledContents(True)
        self.label_3.setObjectName("label_3")
        self.gridLayout.addWidget(self.label_3, 1, 0, 2, 3)
        self.verticalLayout_4.addLayout(self.gridLayout)

        self.scrollArea.setWidget(self.mainBoard)

        self.verticalLayout.addWidget(self.splitter)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 781, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        #QtCore.QMetaObject.connectSlotsByName(MainWindow)
    
    def loop(self, player, actions, text):
        buttons = []
        label = QLabel()
        for name, action in actions:
            button = self.makeButton(name, action)
            self.verticalLayout_2.addWidget(button)
            buttons.append(button)
        self.redraw(player)
        self.result = None
        app.exec()
        if self.result is None:
            sys.exit()
        for button in buttons:
            button.deleteLater()
        return self.result
    
    def redraw(self, player):
        op = player.op
        opa = [str(card.age) if hasattr(card, "age") else card.name \
            for card in op.achs]
        ops = op.scores
        opc = op.cards
        opb = zip(op.splays, op.board)
        mid = list(map(str, map(len, player.cds.cds)))
        pb = zip(player.splays, player.board)
        pc = player.cards
        ps = player.scores
        pa = [str(card.age) if hasattr(card, "age") else card.name \
            for card in player.achs]
        for texts, labellist in [
            (opa, self.opAchievementLayout),
            (ops, self.opScoreLayout),
            (opc, self.opCardLayout),
            (mid, self.middleLayout),
            (pa, self.achievementLayout)]:
            labellist.redraw(texts)
        for cards, cardlist in [
            (pc, self.cardLayout),
            (ps, self.scoreLayout)]:
            labels = self.getLabels(cards)
            cardlist.redraw(labels)
        for board, stacks in [
            (opb, self.opBoardLayout),
            (pb, self.boardLayout)]:
            for (direction, cards), stack in zip(board, stacks):
                labels = self.getLabels(cards)
                stack.redraw(labels, direction)
    
    def makeButton(self, name, action):
        button = QPushButton(name, self.frame)
        def onClick():
            self.result = action
            app.quit()
        button.clicked.connect(onClick)
        return button
    
    def setupCards(self, parent):
        self.cardDict = {}
        for name in pixmaps:
            pixmap = pixmaps[name]
            label = QLabel(parent)
            label.setMaximumSize(QtCore.QSize(175, 125))
            label.setText("")
            label.setPixmap(pixmap)
            label.setScaledContents(True)
            label.setObjectName(name)
            self.cardDict[name] = label
    
    def getLabels(self, cards):
        return [self.cardDict[card.name] for card in cards]

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton_2.setText(_translate("MainWindow", "PushButton"))
        self.pushButton.setText(_translate("MainWindow", "PushButton"))

class PyQt5User:
    def __init__(self, window):
        self.window = window
        self.infoDict = {
            "valids": None, 
            "text": None, 
            "choices": None, 
            "obs": {"obsType": "custom"}
        }
    
    def step(self):
        obsDict = self.getInfo(self.infoDict)
        r = self.window.loop(
            obsDict["obs"],
            zip(obsDict["choices"], obsDict["valids"]),
            obsDict["text"]
        )

if __name__ == "__main__":
    import sys
    app = QApplication(sys.argv)
    MainWindow = QMainWindow()
    ui = Ui_MainWindow(MainWindow)
    ui.setupUi()
    MainWindow.show()
    sys.exit(app.exec_())